MODULE main
VAR
    
	demP : boolean;
	demQ : boolean;
    proc1 : process user(P,demP,demQ);
    proc2 : process user(Q,demP,demQ);
	proc : {P, Q};

ASSIGN
    SPEC AG ! (proc1.state = critical & proc2.state = critical)

    SPEC AG (proc1.state = entering -> AF proc1.state = critical)

MODULE user(proc, demP, demQ) 
VAR   
    state : {idle, entering, critical};

    ASSIGN
	init(state) := idle;
	next(state) := 
                case
    			    state = idle                  : {idle,entering};
	    	       	(state = entering & proc = P & demQ = false) | (state = entering & proc = Q & demP = false) : critical;
		           	state = critical              : {critical, exiting};
		        	state = exiting               : {idle};
		        	TRUE                          : state;
                esac;

    init(demP) := FALSE;    
	next(demP) := 
                case
    			    state = idle & proc = P       : TRUE;
    		       	state = critical & proc = P   : FALSE;
    		       	TRUE                          : demP;
                esac;

    init(demQ) := FALSE;    
	next(demQ) := 
                case
    			    state = idle & proc = Q       : TRUE;
    		       	state = critical & proc = Q   : FALSE;
    		       	TRUE                          : demQ;
                esac;


	FAIRNESS
        runing



	


