MODULE main
VAR
    enable_small : boolean;
    enable_hwy : boolean;
    restart : boolean;

    capteur : process capteur();
    timer   : process timer(restart);
    primary_controller : process primary_controller(timer.state, capteur.state, enable_small, enable_hwy);
    primary_controller : process primary_controller(timer.state, capteur.state, enable_small, enable_hwy);

ASSIGN
     init(enable_small) := FALSE;
     init(enable_hwy)   := FALSE;
     init(restart)      := FALSE; 

    

--#################################################################
MODULE capteur()
VAR
    state : {C_A, C_P};
    
ASSIGN

    init(state) := C_A;
    next(state) :=
                case
                    state = C_A : {C_A, C_P};
                    state = C_P : {C_A, C_P};
                esac;
--#################################################################
MODULE timer(restart)
VAR
    state : {START, SHORT, LONG};
    
ASSIGN
    next(restart) := 
                  case
                      TRUE                : FALSE;       
                  esac;


    init(state) := START;
    next(state) :=
                case
                    state = START : {START, SHORT};
                    state = SHORT & restart = TRUE : {START};
                    state = SHORT : {SHORT, LONG};
                    state = LONG & restart = TRUE  : {START};
                    state = LONG : {LONG};
                esac;
    
--#################################################################
MODULE secondary_controller(timer_state, sensor_state, enable_small, enable_hwy)
VAR
   
    state : {GREEN, YELLOW, RED};
    
ASSIGN

    next(enable_hwy) := 
                  case
                      state = YELLOW & next(state) = RED   : TRUE;
                      TRUE                : FALSE;       
                  esac;

    next(enable_small) := 
                  case               
                      TRUE                : enable_small;       
                  esac;

    next(timer_state) := 
                  case
                      TRUE                : timer_state;       
                  esac;

    next(restart) := 
                  case
                      (state = RED & next(state) = GREEN) | (state = GREEN & next(state) = YELLOW)  : TRUE;
                      TRUE                : FALSE;       
                  esac;

    init(state) := RED;
    next(state) :=
                case
                    state = RED & enable_small = FALSE : {RED};
                    state = RED & enable_small = TRUE : {GREEN};

                    state = GREEN & !(sensor_state = C_A | timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_A | timer_state = LONG) : {YELLOW}; 

                    state = YELLOW & timer_state != SHORT: {YELLOW};
                    state = YELLOW & timer_state = SHORT: {RED};
                    
                esac;
--#################################################################
MODULE primary_controller(timer_state, sensor_state, enable_small, enable_hwy)
VAR
    state : {GREEN, YELLOW, RED};
    
ASSIGN
    next(enable_hwy) := 
                  case
                      TRUE                : enable_hwy;       
                  esac;

    next(enable_small) := 
                  case 
                      state = YELLOW & next(state) = RED   : TRUE;
                      TRUE                : enable_small;       
                  esac;

    next(timer_state) := 
                  case
                      TRUE                : timer_state;       
                  esac;

    next(restart) := 
                  case
                      (state = RED & next(state) = GREEN) | (state = GREEN & next(state) = YELLOW)  : TRUE;
                      TRUE                : FALSE;       
                  esac;

    init(state) := RED;
    next(state) :=
                case
                    state = RED & enable_hwy = FALSE : {RED};
                    state = RED & enable_hwy = TRUE : {GREEN};

                    state = GREEN & !(sensor_state = C_P & timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_P & timer_state = LONG) : {YELLOW}; 

                    state = YELLOW & timer_state != SHORT: {YELLOW};
                    state = YELLOW & timer_state = SHORT: {RED};
                    
                esac;
FAIRNESS
    running





