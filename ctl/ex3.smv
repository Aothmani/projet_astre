MODULE main
VAR
     s : {0,1};
    y0 : {0,1};
    y1 : {0,1};
	proc1 : process proc(s, y0, y1, 0);
    proc2 : process proc(s, y0, y1, 1);
 
ASSIGN
    init(s) := 0;
    init(y0) := 0;
    init(y1) := 0;
    SPEC AG ! (proc1.state = critical & proc2.state = critical)

    SPEC AG (proc1.state = wait -> AF proc1.state = critical) | AG (proc2.state = wait -> AF proc2.state = critical)

    SPEC EG (proc1.state = wait -> EF proc1.state = critical) | EG (proc2.state = wait -> EF proc2.state = critical)
    
    SPEC AG ( ((A [ ! (proc2.state = wait) U proc1.state = wait ]) ->  (A [ ! (proc2.state = critical) U proc1.state = critical])) |((A [ ! (proc1.state = wait) U proc2.state = wait ]) ->  (A [ ! (proc1.state = critical) U proc2.state = critical])))

MODULE capteur()
VAR
    state : {C_A, C_P};
    
ASSIGN

    init(state) := C_A;
    next(state) :=
                case
                    state = C_A : {C_A, C_P};
                    state = C_A : {C_A, C_P};
                esac;
--#################################################################
MODULE temporisation()
VAR
    restart : boolean;
    state : {START, SHORT, LONG};
    
ASSIGN
    init(restart) := TRUE;
    next(restart) := 
                  case
                      next(state) = START : TRUE;
                      TRUE                : restart;       
                  esac;


    init(state) := START;
    next(state) :=
                case
                    state = START : {START, SHORT};
                    state = SHORT & restart = TRUE : {START};
                    state = SHORT : {SHORT, LONG};
                    state = LONG & restart = TRUE  : {START};
                    state = LONG : {LONG};
                esac;
    
--#################################################################
MODULE secondary_controller()
VAR
    sensor_state : {C_A, C_P};
    timer_state : {START, SHORT, LONG}
    state : {GREEN, YELLOW, RED};
    enable_small : boolean;
    
ASSIGN
    init(enable_small) := FALSE;
    next(enable_small) := 
                  case
                      next(state) = START : TRUE;
                      TRUE                : restart;       
                  esac;


    init(state) := RED;
    next(state) :=
                case
                    state = RED & enable_small = FALSE : {RED};
                    state = RED & enable_small = TRUE : {GREEN};

                    state = GREEN & (sensor_state = C_A | timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_A | timer_state = LONG) : {YELLOW}; --CHELOU, A VERIFIER

                    state = YELLOW & timer_state != SHORT: {YELLOW};
                    state = YELLOW & timer_state = SHORT: {RED};
                    
                esac;
--#################################################################
MODULE primary_controller()
VAR
    sensor_state : {C_A, C_P};
    timer_state : {START, SHORT, LONG}
    state : {GREEN, YELLOW, RED};
    enable_hwy : boolean;
    
ASSIGN
    init(enable_hwy) := FALSE;
    next(enable_hwy) := 
                  case
                      next(state) = GREEN : TRUE;
                      next(state) = RED   : FALSE;
                      TRUE                : enable_hwy;       
                  esac;

    init(sensor_state) := ;--JE MET QUOI?????
    next(sensor_state) := 
                  case
                      next(state) = GREEN : C_P;
                      TRUE                : enable_hwy;       
                  esac;

    init(state) := RED;
    next(state) :=
                case
                    state = RED & enable_hwy = FALSE : {RED};
                    state = RED & enable_hwy = TRUE : {GREEN};

                    state = GREEN & (sensor_state = C_P & timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_P & timer_state = LONG) : {YELLOW}; --CHELOU, A VERIFIER

                    state = YELLOW & timer_state != SHORT: {YELLOW};
                    state = YELLOW & timer_state = SHORT: {RED};
                    
                esac;
FAIRNESS
    running





