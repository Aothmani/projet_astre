MODULE main
VAR
    enable_small : enable_small(primary_controller);
    enable_hwy : enable_hwy(secondary_controller);
    restart : restart(primary_controller, secondary_controller);

    capteur_secondary : capteur();
    capteur_primary : capteur();
    timer   : timer(restart.state);
    primary_controller : primary_controller(timer.state, capteur_secondary.state, enable_small.state, enable_hwy.state, restart.state);
    secondary_controller : secondary_controller(timer.state, capteur_secondary.state, enable_small.state, enable_hwy.state, restart.state);
    capteur_carrefour : capteur_carrefour(capteur_primary, capteur_secondary, primary_controller, secondary_controller);

    SPEC AG ( primary_controller.state = GREEN ->  secondary_controller.state = RED) & 
         AG ( secondary_controller.state = GREEN -> primary_controller.state = RED)

    SPEC AG (AF primary_controller.state = GREEN) & AG (AF secondary_controller.state = GREEN)

--#################################################################

MODULE restart(primary, secondary)
VAR
    state : boolean;
ASSIGN
    init(state) := FALSE;
    next(state) :=
                case
                    (primary.state = RED & next(primary.state) = GREEN) | (primary.state = GREEN & next(primary.state) = YELLOW) 
                    | (secondary.state = RED & next(secondary.state) = GREEN) | (secondary.state = GREEN & next(secondary.state) = YELLOW)  : TRUE;
                    TRUE                : FALSE;       
                  esac;

--#################################################################
MODULE capteur_carrefour(capteur_primary, capteur_secondary, primary, secondary)
VAR
    state : {C_A, C_P};

ASSIGN
    init(state) := C_A;
    next(state) := 
                  case
                      ( capteur_secondary.state = C_P & secondary.state = GREEN ) | ( capteur_primary.state = C_P & primary.state = GREEN ) : C_P;
                      TRUE                : C_A;       
                  esac;

--#################################################################
MODULE enable_hwy(secondary)
VAR
    state : boolean;

ASSIGN
    init(state) := FALSE;
    next(state) := 
                  case
                      secondary.state = YELLOW & next(secondary.state) = RED   : TRUE;
                      TRUE                : FALSE;       
                  esac;

--#################################################################
MODULE enable_small(primary)
VAR
    state : boolean;

ASSIGN
    init(state) := FALSE;
    next(state) := 
                  case 
                      primary.state = YELLOW & next(primary.state) = RED   : TRUE;
                      TRUE                : FALSE;       
                  esac;



--#################################################################
MODULE capteur()
VAR
    state : {C_A, C_P};
    
ASSIGN

    init(state) := C_A;
    next(state) :=
                case
                    state = C_A : {C_A, C_P};
                    state = C_P : {C_A, C_P};
                esac;

FAIRNESS state = C_P;
  
--#################################################################
MODULE timer(restart)
VAR
    state : {START, SHORT, LONG};
    
ASSIGN
    init(state) := START;
    next(state) :=
                case
                    state = START : {START, SHORT};
                    state = SHORT & restart = TRUE : {START};
                    state = SHORT : {SHORT, LONG};
                    state = LONG & restart = TRUE  : {START};
                    state = LONG : {LONG};
                esac;

FAIRNESS state = LONG;

--#################################################################
MODULE secondary_controller(timer_state, sensor_state, enable_small, enable_hwy, restart)
VAR
   
    state : {GREEN, YELLOW, RED};
    
ASSIGN
    init(state) := RED;
    next(state) :=
                case
                    state = RED & enable_small = FALSE : {RED};
                    state = RED & enable_small = TRUE : {GREEN};

                    state = GREEN & !(sensor_state = C_A | timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_A | timer_state = LONG) : {YELLOW}; 

                    state = YELLOW & ! (next(timer_state) = SHORT) : {YELLOW};
                    state = YELLOW & next(timer_state) = SHORT : {RED};
                    
                esac;

  
--#################################################################
MODULE primary_controller(timer_state, sensor_state, enable_small, enable_hwy, restart)
VAR
    state : {GREEN, YELLOW, RED};
    
ASSIGN
    init(state) := GREEN;
    next(state) :=
                case
                    state = RED & enable_hwy = FALSE : {RED};
                    state = RED & enable_hwy = TRUE : {GREEN};

                    state = GREEN & !(sensor_state = C_P & timer_state = LONG) : {GREEN};
                    state = GREEN & (sensor_state = C_P & timer_state = LONG) : {YELLOW}; 

                    state = YELLOW & timer_state = SHORT: {RED};
		            TRUE : state;

                esac;





