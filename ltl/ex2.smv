MODULE main
VAR
    s : integer;
    y0 : integer;
    y1 : integer;
	p0 : process proc(s, y0, y1, 0);
    p1 : process proc(s, y0, y1, 1);
 
ASSIGN
    init(s) := 0;
    init(y0) := 0;
    init(y1) := 0;

MODULE proc(s, y0, y1, i)
VAR
    state : {idle, wait, critical};
    
ASSIGN

    init(state) := idle;
    next(state) :=
                case
                    state = idle                       : {wait};
                    (state = wait & !(y != 0 & s = i)) : critical;
                    state =  wait 
                    state = critical                   : {critical, idle};
                    TRUE                               : state;
                esac;

    next(y0) :=
                case
                    state = idle & i = 0     : 1;
                    state = wait & i = 0     : y0;
                    state = critical & i = 0 : 0;
                    TRUE                     : y0;
                esac;

    next(y1) :=
                case
                    state = idle & i = 1     : 0;
                    state = wait & i = 1     : 1;
                    state = critical & i = 1 : 1;
                    TRUE                     : y;
                esac;


                    
    next(s) :=
                case
                    state = idle : 0;
                    state = wait : i;
                    TRUE : s;
                esac;
--FAIRNESS
    --running

--LTLSPEC F G c
--LTLSPEC G F c
--LTLSPEC X ! c -> X X c
--LTLSPEC G a
--LTLSPEC a U G b | c
--LTLSPEC (X X b) U (b | c)


