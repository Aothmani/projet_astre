MODULE main
VAR
     s : {0,1};
    y0 : {0,1};
    y1 : {0,1};
	p0 : process proc(s, y0, y1, 0);
    p1 : process proc(s, y0, y1, 1);
 
ASSIGN
    init(s) := 0;
    init(y0) := 0;
    init(y1) := 0;
LTLSPEC G ! (p0.state = critical & p1.state = critical)
LTLSPEC G ((p0.state = wait -> F p0.state = critical) & (p1.state = wait -> F p1.state = critical))
LTLSPEC G F p0.state = critical & G F p1.state = critical
MODULE proc(s, y0, y1, i)
VAR
    state : {idle, wait, critical};
    
ASSIGN

    init(state) := idle;
    next(state) :=
                case
                    state = idle                       : {wait};
                    (state = wait & i = 0) & (y1 = 0 | s != 0)  : {critical};
                    (state = wait & i = 1) & (y0 = 0 | s != 1)   : {critical};
                    state = critical                   : {idle};
                    TRUE                               : state;
                esac;
  
    next(y0) :=
                case
                    next(state) = idle & i = 0     : 0;
                    next(state) = wait & i = 0     : 1;
                    TRUE                     : y0;
                esac;

    next(y1) :=
                case
                    next(state) = idle & i = 1     : 0;
                    next(state) = wait & i = 1     : 1;
                    TRUE                     : y1;
                esac;


                    
    next(s) :=
                case
                    next(state) = wait : i;
                    TRUE : s;
                esac;
FAIRNESS
    running


--LTLSPEC F G c
--LTLSPEC G F c
--LTLSPEC X ! c -> X X c
--LTLSPEC G a
--LTLSPEC a U G b | c
--LTLSPEC (X X b) U (b | c)


